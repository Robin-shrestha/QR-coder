{"version":3,"sources":["components/SendData.js","components/Canvas.js","App.js","index.js"],"names":["SendData","setDataToCode","useState","textFieldData","setTextFieldData","dataHandler","e","preventDefault","className","onScroll","type","value","placeholder","onChange","target","onClick","Canvas","QRData","setQRData","canvas","useRef","a","length","useEffect","ctx","current","getContext","map","row","indexR","col","indexC","fillStyle","fillRect","ref","width","height","style","backgroundColor","console","log","window","open","toDataURL","gh","document","createElement","href","download","click","App","dataToCode","fetch","method","headers","body","JSON","stringify","data_to_qr","then","res","json","data","QRcode","textAlign","ReactDOM","render","StrictMode","getElementById"],"mappings":"uJAmCeA,EAjCE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACIC,mBAAS,IADb,mBAC/BC,EAD+B,KAChBC,EADgB,KAGhCC,EAAc,SAACC,GACnBA,EAAEC,iBAEEJ,IACFF,EAAcE,GACdC,EAAiB,MAIrB,OACE,yBAAKI,UAAU,oBACb,0BAAMC,SAAUJ,GACd,2BAAOG,UAAU,gBAAjB,iBACA,2BACEE,KAAK,OACLF,UAAU,eACVG,MAAOR,EACPS,YAAY,mBACZC,SAAU,SAACP,GACTF,EAAiBE,EAAEQ,OAAOH,UAG9B,4BAAQH,UAAU,SAASO,QAASV,GAApC,kBCqCOW,EA9DA,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,UAAWjB,EAAoB,EAApBA,cAC7BkB,EAASC,iBAAO,MAChBC,EAAIJ,EAAOK,OAEjBC,qBAAU,WACR,IACMC,EADOL,EAAOM,QACHC,WAAW,MAC5BT,EAAOU,KAAI,SAACC,EAAKC,GAAN,OACTD,EAAID,KAAI,SAACG,EAAKC,GAQZ,OAPY,IAARD,GACFN,EAAIQ,UAAY,QAChBR,EAAIS,SAAkB,GAATF,EAAsB,GAATF,EAAa,GAAI,KAC1B,IAARC,IACTN,EAAIQ,UAAY,QAChBR,EAAIS,SAAkB,GAATF,EAAsB,GAATF,EAAa,GAAI,KAEtC,aAGV,CAACZ,IAgBJ,OACE,yBAAKT,UAAU,gBACb,4BACE0B,IAAKf,EACLX,UAAU,aACV2B,MAAW,GAAJd,EACPe,OAAY,GAAJf,EACRgB,MAAO,CAAEC,gBAAiB,UAE5B,yBAAK9B,UAAU,gBACb,4BACEA,UAAiB,IAANa,EAAU,gBAAkB,eACvCN,QA1BgB,SAACT,GACvBiC,QAAQC,IAAI,OACZC,OAAOC,KAAKvB,EAAOM,QAAQkB,UAAU,eACrC,IAAIC,EAAKzB,EAAOM,QAAQkB,UAAU,OAC9BtB,EAAIwB,SAASC,cAAc,KAC/BzB,EAAE0B,KAAOH,EACTvB,EAAE2B,SAAW,YAEb3B,EAAE4B,UAgBE,mBAMA,4BACEzC,UAAiB,IAANa,EAAU,gBAAkB,eACvCN,QAtBa,SAACT,GACpBY,EAAU,IACVjB,EAAc,MAkBV,mB,KCXOiD,MApCf,WAAgB,IAAD,EACuBhD,mBAAS,IADhC,mBACNiD,EADM,KACMlD,EADN,OAEeC,mBAAS,IAFxB,mBAENe,EAFM,KAEEC,EAFF,KAqBb,OAjBAK,qBAAU,WACJ4B,GACFC,MAAM,cAAe,CACnBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,WAAYP,MAElCQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLvB,QAAQC,IAAIsB,GACZ5C,EAAU4C,EAAKC,aAGpB,CAACZ,IAGF,yBAAK3C,UAAU,OACb,kBAAC,EAAD,CAAUP,cAAeA,IACzB,wBAAIoC,MAAO,CAAE2B,UAAW,WAAab,GAGrC,kBAAC,EAAD,CACElC,OAAQA,EACRC,UAAWA,EACXjB,cAAeA,MChCvBgE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,U","file":"static/js/main.e4e09e80.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst SendData = ({ setDataToCode }) => {\r\n  const [textFieldData, setTextFieldData] = useState(\"\");\r\n\r\n  const dataHandler = (e) => {\r\n    e.preventDefault();\r\n    // console.log(textFieldData);\r\n    if (textFieldData) {\r\n      setDataToCode(textFieldData);\r\n      setTextFieldData(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"qrtext-container\">\r\n      <form onScroll={dataHandler}>\r\n        <label className=\"qrtext-label\">Data to Code:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"qrtext-input\"\r\n          value={textFieldData}\r\n          placeholder=\" text goes here \"\r\n          onChange={(e) => {\r\n            setTextFieldData(e.target.value);\r\n          }}\r\n        />\r\n        <button className=\"button\" onClick={dataHandler}>\r\n          Get QR Code\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendData;\r\n","import React, { useEffect, useRef } from \"react\";\r\n\r\nconst Canvas = ({ QRData, setQRData, setDataToCode }) => {\r\n  const canvas = useRef(null);\r\n  const a = QRData.length;\r\n\r\n  useEffect(() => {\r\n    const canv = canvas.current;\r\n    const ctx = canv.getContext(\"2d\");\r\n    QRData.map((row, indexR) =>\r\n      row.map((col, indexC) => {\r\n        if (col === 1) {\r\n          ctx.fillStyle = \"black\";\r\n          ctx.fillRect(indexC * 10, indexR * 10, 10, 10);\r\n        } else if (col === 0) {\r\n          ctx.fillStyle = \"white\";\r\n          ctx.fillRect(indexC * 10, indexR * 10, 10, 10);\r\n        }\r\n        return null;\r\n      })\r\n    );\r\n  }, [QRData]);\r\n\r\n  const downloadHandler = (e) => {\r\n    console.log(\"asd\");\r\n    window.open(canvas.current.toDataURL(\"qrcode/png\"));\r\n    var gh = canvas.current.toDataURL(\"png\");\r\n    var a = document.createElement(\"a\");\r\n    a.href = gh;\r\n    a.download = \"image.png\";\r\n\r\n    a.click();\r\n  };\r\n  const clearHandler = (e) => {\r\n    setQRData([]);\r\n    setDataToCode(\"\");\r\n  };\r\n  return (\r\n    <div className=\"container-qr\">\r\n      <canvas\r\n        ref={canvas}\r\n        className=\"img-qrcode\"\r\n        width={a * 10}\r\n        height={a * 10}\r\n        style={{ backgroundColor: \"#eee\" }}\r\n      />\r\n      <div className=\"container-dl\">\r\n        <button\r\n          className={a === 0 ? \"button dl-off\" : \"button dl-on\"}\r\n          onClick={downloadHandler}\r\n        >\r\n          download QRCode\r\n        </button>\r\n        <button\r\n          className={a === 0 ? \"button dl-off\" : \"button dl-on\"}\r\n          onClick={clearHandler}\r\n        >\r\n          clear QRCode\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SendData from \"./components/SendData\";\r\n// import QRCodeMaker from \"./components/QRCodeMaker\";\r\nimport Canvas from \"./components/Canvas\";\r\nimport \"./app.css\";\r\n\r\nfunction App() {\r\n  const [dataToCode, setDataToCode] = useState(\"\");\r\n  const [QRData, setQRData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (dataToCode) {\r\n      fetch(\"/get_qrcode\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ data_to_qr: dataToCode }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          setQRData(data.QRcode);\r\n        });\r\n    }\r\n  }, [dataToCode]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SendData setDataToCode={setDataToCode} />\r\n      <h3 style={{ textAlign: \"center\" }}>{dataToCode}</h3>\r\n\r\n      {/* <QRCodeMaker QRData={QRData} /> */}\r\n      <Canvas\r\n        QRData={QRData}\r\n        setQRData={setQRData}\r\n        setDataToCode={setDataToCode}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}